<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.jobjob.albaing.mapper.CompanyMapper">

    <!-- 기업 회원가입 -->
    <insert id="registerCompany">
        INSERT INTO companies (
            company_name,
            company_registration_number,
            company_owner_name,
            company_open_date,
            company_password,
            company_email,
            company_phone,
            company_local_address,
            company_approval_status,
            company_created_at,
            company_updated_at,
            company_logo,
            company_description
        ) VALUES (
                     #{companyName},
                     #{companyRegistrationNumber},
                     #{companyOwnerName},
                     #{companyOpenDate},
                     #{companyPassword},
                     #{companyEmail},
                     #{companyPhone},
                     #{companyLocalAddress},
                     #{companyApprovalStatus},
                     #{companyCreatedAt},
                     #{companyUpdatedAt},
                     #{companyLogo},
                     #{companyDescription}
                 );
    </insert>

    <!-- 기업 로그인 -->
    <select id="loginCompany" parameterType="map" resultType="Company">
        SELECT *
        FROM companies
        WHERE company_email = #{companyEmail}
    </select>

    <!-- 기업 승인여부 확인 -->
    <select id="isCompanyApproved" resultType="boolean">
        SELECT EXISTS (
            SELECT 1
            FROM companies
            WHERE company_approval_status = 'approved'
        );
    </select>

    <!-- 기업 존재여부 확인 -->
    <select id="isCompanyExist" resultType="boolean">
        SELECT COUNT(*) > 0
        FROM companies
        WHERE company_email = #{companyEmail}
    </select>

    <!-- 기업 전화번호 존재여부 확인 -->
    <select id="isCompanyPhoneExist" resultType="boolean">
        SELECT COUNT(*) > 0
        FROM companies
        WHERE company_phone = #{companyPhone}
    </select>

    <!-- 기업 이메일 찾기 -->
    <select id="findCompanyEmail">
        SELECT company_email
        FROM companies
        WHERE company_name = #{companyName}
          AND company_phone = #{companyPhone}
    </select>

    <!-- 이메일로 기업 조회 -->
    <select id="getCompanyByEmail">
        SELECT *
        FROM companies
        WHERE company_email = #{companyEmail}
    </select>

    <!-- 기업 비밀번호 바꾸기 -->
    <update id="updateCompanyPassword">
        UPDATE companies
        SET company_password = #{encodedPassword}
        WHERE company_email = #{companyEmail}
    </update>

    <!-- 기업 상세 정보 불러오기 -->
    <select id="companyDetail" resultType="Company">
        SELECT *
        FROM companies
        WHERE company_id = #{companyId}
    </select>

    <!-- 기업 상세 정보 수정 -->
    <update id="updateDetail">
        UPDATE COMPANIES
        SET
            company_name = #{companyName},
            company_registration_number = #{companyRegistrationNumber},
            company_owner_name = #{companyOwnerName},
            company_open_date = #{companyOpenDate},
            company_email = #{companyEmail},
            company_phone = #{companyPhone},
            company_local_address = #{companyLocalAddress},
            company_description = #{companyDescription},
            company_logo = #{companyLogo},
            company_updated_at = NOW()
        WHERE company_id = #{companyId}
    </update>

    <!-- 모든 회사 목록 조회 -->
    <select id="getAllCompanies" resultType="Company">
        SELECT *
        FROM companies
        WHERE company_approval_status = 'approved'
        ORDER BY company_name ASC
    </select>

    <!-- 회사명으로 검색 -->
    <select id="searchCompaniesByName" resultType="Company">
        SELECT *
        FROM companies
        WHERE company_approval_status = 'approved'
          AND company_name LIKE CONCAT('%', #{keyword}, '%')
        ORDER BY company_name ASC
    </select>

    <!-- 기업 리뷰 조회 -->
    <select id="showReviews" resultType="Review">
        SELECT *
        FROM reviews
        WHERE company_id = #{companyId}
        ORDER BY review_created_at DESC
    </select>

    <!-- 리뷰 등록 -->
    <insert id="addReview">
        INSERT INTO reviews (
            company_id,
            user_id,
            review_title,
            review_content,
            review_created_at,
            review_updated_at
        ) VALUES (
                     #{companyId},
                     #{userId},
                     #{reviewTitle},
                     #{reviewContent},
                     NOW(),
                     NOW()
                 )
    </insert>

    <!-- 리뷰 상세 조회 -->
    <select id="reviewCheck" resultType="Review">
        SELECT
            review_id,
            user_id,
            company_id,
            review_title,
            review_content,
            review_created_at,
            review_updated_at
        FROM reviews
        WHERE review_id = #{reviewId}
    </select>

    <!-- 리뷰에 속한 댓글 목록 조회 -->
    <select id="getCommentsByReviewId" resultType="Comment">
        SELECT
            comment_id,
            review_id,
            user_id,
            comment_content,
            comment_created_at,
            comment_updated_at
        FROM comments
        WHERE review_id = #{reviewId}
        ORDER BY comment_created_at ASC
    </select>

    <!-- 리뷰 삭제 -->
    <delete id="deleteReview">
        DELETE FROM reviews
        WHERE review_id = #{reviewId}
        <if test="userId != null">
            AND user_id = #{userId}
        </if>
    </delete>

    <!-- 댓글 등록 -->
    <insert id="addComment">
        INSERT INTO comments (
            review_id,
            user_id,
            comment_content,
            comment_created_at,
            comment_updated_at
        ) VALUES (
                     #{reviewId},
                     #{userId},
                     #{commentContent},
                     NOW(),
                     NOW()
                 )
    </insert>

    <!-- 댓글 삭제 -->
    <delete id="deleteComment">
        DELETE FROM comments
        WHERE comment_id = #{commentId}
        <if test="userId != null">
            AND user_id = #{userId}
        </if>
    </delete>
</mapper>